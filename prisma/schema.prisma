generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  displayName String
  picture     String?

  role UserRole @default(REGULAR)

  isVerified         Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  method AuthMethod

  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

model Cell {
  id String @id @default(uuid())

  floor     Int
  classroom Int?

  isLocked Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  KeyLog     KeyLog[]

  @@map("cells")
}

model Customer {
  id String @id @default(uuid())

  name String
  rfid String
  role CustomerRole

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cells  Cell[]
  KeyLog KeyLog[]

  @@map("customer")
}

model KeyLog {
  id String @id @default(uuid())

  action    KeyAction
  timestamp DateTime  @default(now())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  cell   Cell   @relation(fields: [cellId], references: [id])
  cellId String

  @@map("key_log")
}

enum KeyAction {
  TAKEN
  RETURNED
  BLOCK
  UNBLOCK
}

enum UserRole {
  REGULAR
  ADMIN
}

enum CustomerRole {
  ADMIN
  TEACHER
  STUDENT
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
  GITHUB
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}
